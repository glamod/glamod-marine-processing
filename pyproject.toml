[build-system]
requires = [
  "setuptools>=42",
  "wheel",
  "setuptools_scm[toml]>=3.4",
  "setuptools_scm_git_archive"
]
build-backend = "setuptools.build_meta"

[project]
name = "glamod_marine_processing"
description = "GLAMOD marine processing toolbox"
authors = [
  {name = "Ludwig Lierhammer", email = "ludwig.lierhammer@dwd.de"}
]
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.9"
license = {file = "LICENSE"}
keywords = ["glamod_marine_processing"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12"
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.scripts]
obs_suite = "glamod_marine_processing.cli:ObsCli"
metadata_suite = "glamod_marine_processing.cli:MdataCli"
qc_suite = "glamod_marine_processing.cli:QcCli"
config_suite = "glamod_marine_processing.cli:ConfigCli"

[project.urls]
"Homepage" = "https://glamod-marine-processing.readthedocs.io"
"Source" = "https://github.com/glamod/glamod-marine-processing"
"Changelog" = "https://glamod-marine-processing.readthedocs.io/en/latest/history.html"
"Issue tracker" = "https://github.com/glamod/glamod-marine-processing"

[tool]

[tool.black]
target-version = [
  "py39",
  "py310",
  "py311",
  "py312"
]

[tool.coverage.run]
relative_files = true
omit = ["tests/*.py"]

[tool.isort]
profile = "black"
py_version = 39
append_only = true
add_imports = "from __future__ import annotations"

[tool.mypy]
python_version = 3.9
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
  "pandas",
  "matplotlib",
  "pytest"
]
ignore_missing_imports = true

[tool.nbqa.md]
mdformat = true

[tool.pytest]
python_files = "test_*.py"
testpaths = ["./tests"]

[tool.rstcheck]
report_level = "WARNING"
ignore_roles = [
  "pull",
  "issue"
]

[tool.ruff]
src = ["cdm_reader_mapper"]
line-length = 150
target-version = "py38"
builtins = ["ellipsis"]
exclude = [
  ".git",
  ".eggs",
  "docs",
  "build",
  "tests"
]
ignore = [
  "D205",
  "D400",
  "D401"
]
select = [
  "C9",
  "D",
  "E",
  "F",
  "W"
]

[tool.ruff.flake8-bandit]
check-typed-exception = true

[tool.ruff.format]
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["glamod_marine_processing"]
case-sensitive = true
detect-same-package = false
lines-after-imports = 1
no-lines-before = ["future", "standard-library"]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.per-file-ignores]
"docs/*.py" = ["D100", "D101", "D102", "D103"]
"tests/*.py" = ["D100", "D101", "D102", "D103"]
"cdm_reader_mapper/**/__init__.py" = ["F401", "F403", "I001"]

[tool.ruff.pycodestyle]
max-doc-length = 180

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.setuptools]
packages = ["glamod_marine_processing"]

[tool.setuptools.dynamic.dependencies]
file = "ci/requirements/requirements.txt"

[tool.setuptools.dynamic.optional-dependencies]
obs = {file = "ci/requirements/requirements_ob.txt"}
conf = {file = "ci/requirements/requirements_cf.txt"}
qc = {file = "ci/requirements/requirements_qc.txt"}
meta = {file = "ci/requirements/requirements_md.txt"}
complete = {file = ["ci/requirements/requirements_ob.txt", "ci/requirements/requirements_cf.txt", "ci/requirements/requirements_qc.txt", "ci/requirements/requirements_md.txt"]}

[tool.setuptools_scm]
fallback_version = "999"
write_to = "glamod_marine_processing/_version.py"
write_to_template = '__version__ = "{version}"'
tag_regex = "^(?P<prefix>v)?(?P<version>[^\\+]+)(?P<suffix>.*)?$"
